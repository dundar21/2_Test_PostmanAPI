{
	"info": {
		"_postman_id": "b0ed03b8-221a-49fa-b3a7-57a379e5afd0",
		"name": "Test_CRUD",
		"description": "StartFragment\n\n### ðŸš€ Get started here\n\nThis template guides you through the essential **CRUD operations** (GET, POST, PUT, DELETE), working with pet user variables, and writing **tests** to ensure your API works as expected.\n\n---\n\n### ðŸ”– How to use this template\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods. This collection contains each of these request types.\n\n- Open each request in the collection and click \"Send\" to see how your API responds to these different HTTP methods.\n    \n\n---\n\n#### **Step 2: View responses**\n\nOnce you send a request, check the **Response** tab for the following:\n\n- **Status Code**: Ensure it matches the expected result (e.g., 200 OK for a successful request).\n- **Response Time**: Check how long the request took to complete.\n- **Response Size**: The size of the data returned by the API.\n    \n\n---\n\n#### **Step 3: Send new Body data**\n\nYou can update or add new data in the **Body** section for a **POST** request. This is typically used for creating new resources or submitting data.\n\nExample body for a POST request:\n\n```\n{\n  \"id\": int,\n  \"username\": \"string\",\n  \"firstName\": \"string\",\n  \"lastName\": \"string\",\n  \"email\": \"string\",\n  \"password\": \"string\",\n  \"phone\": \"string\",\n  \"userStatus\": int\n}\n\n ```\n\n### ðŸ’¡Related templates\n\n- [API testing basics](https://www.postman.com/)\n- [API documentation](https://www.postman.com/)\n- [Authorization method](https://www.postman.com/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31391890"
	},
	"item": [
		{
			"name": "Create_User_Positive",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 2121,\n  \"username\": \"test21\",\n  \"firstName\": \"Alitest\",\n  \"lastName\": \"test\",\n  \"email\": \"Alitest@denemetest.com\",\n  \"password\": \"sifre12.\",\n  \"phone\": \"+905555555556\",\n  \"userStatus\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{pet_url}}/user",
					"host": [
						"{{pet_url}}"
					],
					"path": [
						"user"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Read_User_Positive",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{pet_url}}/user/test21",
					"host": [
						"{{pet_url}}"
					],
					"path": [
						"user",
						"test21"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Update_UserPassword_Positive",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "5fcbdaa6-e41e-4f88-9c3f-b4a841ecedce",
							"type": "string"
						},
						{
							"key": "key",
							"value": "api_key",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 2121,\n  \"username\": \"test21\",\n  \"firstName\": \"Alitest\",\n  \"lastName\": \"test\",\n  \"email\": \"Alitest@denemetest.com\",\n  \"password\": \"sifre12.updated\",\n  \"phone\": \"+905555555556\",\n  \"userStatus\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{pet_url}}/user/test21",
					"host": [
						"{{pet_url}}"
					],
					"path": [
						"user",
						"test21"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Create_User_Negative_AlreadyExist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "api_key",
							"type": "string"
						},
						{
							"key": "value",
							"value": "5fcbdaa6-e41e-4f88-9c3f-b4a841ecedce",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 2121,\n  \"username\": \"test21\",\n  \"firstName\": \"Velitest\",\n  \"lastName\": \"test\",\n  \"email\": \"Velitest@denemetest.com\",\n  \"password\": \"sifre12.\",\n  \"phone\": \"+905555555521\",\n  \"userStatus\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{pet_url}}/user",
					"host": [
						"{{pet_url}}"
					],
					"path": [
						"user"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Read_User_Negative_NoUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{pet_url}}/user/test22",
					"host": [
						"{{pet_url}}"
					],
					"path": [
						"user",
						"test22"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Update_User_Negative_NoUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 2122,\n  \"username\": \"test22\",\n  \"firstName\": \"Alitest\",\n  \"lastName\": \"test\",\n  \"email\": \"Alitest@denemetest.com\",\n  \"password\": \"sifre12.\",\n  \"phone\": \"+905555555556\",\n  \"userStatus\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{pet_url}}/user/test22",
					"host": [
						"{{pet_url}}"
					],
					"path": [
						"user",
						"test22"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete_User_Positive",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "key",
							"value": "api_key",
							"type": "string"
						},
						{
							"key": "value",
							"value": "5fcbdaa6-e41e-4f88-9c3f-b4a841ecedce",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{pet_url}}/user/test21",
					"host": [
						"{{pet_url}}"
					],
					"path": [
						"user",
						"test21"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete_User_Negative_NoUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{pet_url}}/user/test22",
					"host": [
						"{{pet_url}}"
					],
					"path": [
						"user",
						"test22"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}